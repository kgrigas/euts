<?php

/**
 * Soap client BaySoft
 *
 * Autogenerated with the Yii extension wsdl2php.
 */
class GetPropertyData
{
	public $BranchCode; //string;
}

class GetPropertyDataResponse
{
	public $GetPropertyDataResult; //GetPropertyDataResult;
}

class GetPropertyDataResult
{
	public $schema; //<anyXML>;
	public $any; //<anyXML>;
}

class GetPropertyDataFiltered
{
	public $BranchCode; //string;
	public $PriceFrom; //int;
	public $PriceTo; //int;
	public $IsResidential; //boolean;
	public $IsLetting; //boolean;
	public $IsOverseas; //boolean;
	public $IsCommercial; //boolean;
	public $Location; //string;
}

class GetPropertyDataFilteredResponse
{
	public $GetPropertyDataFilteredResult; //GetPropertyDataFilteredResult;
}

class GetPropertyDataFilteredResult
{
	public $schema; //<anyXML>;
	public $any; //<anyXML>;
}

class GetPropertyDetail
{
	public $BranchCode; //string;
	public $RecordId; //int;
}

class GetPropertyDetailResponse
{
	public $GetPropertyDetailResult; //GetPropertyDetailResult;
}

class GetPropertyDetailResult
{
	public $schema; //<anyXML>;
	public $any; //<anyXML>;
}

class GetPropertyMedia
{
	public $BranchCode; //string;
	public $RecordId; //int;
}

class GetPropertyMediaResponse
{
	public $GetPropertyMediaResult; //GetPropertyMediaResult;
}

class GetPropertyMediaResult
{
	public $schema; //<anyXML>;
	public $any; //<anyXML>;
}

/**
 * The soap client proxy class
 */
class BaySoft
{
	public $soapClient;

	private $key = 'agm96jnkUvSAI6j6D3JV3hTmso0S6Fgm8L2R57X33QJ09nWS1gbgs3Ny8iYkEv7wd9q78Il3p3vv1JvsZ1scRh16gc1pdHlWMNr6SUHPL2m1hlgov2JSvG5gQBaw92JUTjwxg5na3wOKCbvbfAB1D2Zfxt2oaGmnt2i7g08I3nxJpeR51lE2RSm77aYRou67grTNfrk1';

	private static $classmap = array(
		'GetPropertyData' => 'GetPropertyData',
		'GetPropertyDataResponse' => 'GetPropertyDataResponse',
		'GetPropertyDataResult' => 'GetPropertyDataResult',
		'GetPropertyDataFiltered' => 'GetPropertyDataFiltered',
		'GetPropertyDataFilteredResponse' => 'GetPropertyDataFilteredResponse',
		'GetPropertyDataFilteredResult' => 'GetPropertyDataFilteredResult',
		'GetPropertyDetail' => 'GetPropertyDetail',
		'GetPropertyDetailResponse' => 'GetPropertyDetailResponse',
		'GetPropertyDetailResult' => 'GetPropertyDetailResult',
		'GetPropertyMedia' => 'GetPropertyMedia',
		'GetPropertyMediaResponse' => 'GetPropertyMediaResponse',
		'GetPropertyMediaResult' => 'GetPropertyMediaResult',

	);


	function __construct($url = 'http://iframe.baysoft-net.co.uk/webservice/webservice.asmx?wsdl') {
		$this->soapClient = new SoapClient($url, array("classmap" => self::$classmap, "trace" => true, "exceptions" => true));
	}


	function GetPropertyData() {
		$response = $this->soapClient->GetPropertyData(array(
			'BranchCode'=>$this->key,
		));
		return $response;
	}


	function GetPropertyDataFiltered($GetPropertyDataFiltered) {
		$response = $this->soapClient->GetPropertyDataFiltered($GetPropertyDataFiltered);

		return $response;
	}


	function GetPropertyDetail($recordId) {
		$response = $this->soapClient->GetPropertyDetail(array(
			'BranchCode'=>$this->key,
			'RecordId'=>$recordId,
		));

		return $response;
	}


	function GetPropertyMedia($recordId) {
		$response = $this->soapClient->GetPropertyMedia(array(
			'BranchCode'=>$this->key,
			'RecordId'=>$recordId,
		));

		return $response;
	}

	public function getData() {
		$xmlProperties = new SimpleXmlElement($this->getPropertyData()->GetPropertyDataResult->any);
		$xmlProperties = $xmlProperties->NewDataSet->Table;

		/*$group = array();
		$field = 'p_Tenure';

		foreach ($xmlProperties as $xmlProperty) {
			if (!array_key_exists((string)$xmlProperty->$field,$group)) {
				$group[(string)$xmlProperty->$field] = 1;
			} else {
				$group[(string)$xmlProperty->$field]++;
			}
		}

		var_dump($group);*/


		foreach ($xmlProperties as $xmlProperty) {

			$xmlPropertyMedia = new SimpleXmlElement($this->getPropertyMedia((string)$xmlProperty->RecordId)->GetPropertyMediaResult->any);
			$xmlPropertyMedia = $xmlPropertyMedia->NewDataSet->Table;
			$xmlPropertyDetail = new SimpleXmlElement($this->getPropertyDetail((string)$xmlProperty->RecordId)->GetPropertyDetailResult->any);
			if (!empty($xmlPropertyDetail)) {
				$xmlPropertyDetail = $xmlPropertyDetail->NewDataSet->Table;
			} else {
				$xmlPropertyDetail = array();
			}

			$this->convertProperty($xmlProperty, $xmlPropertyMedia, $xmlPropertyDetail);
		}
	}

	private function convertProperty($xmlProperty, $xmlPropertyMedia, $xmlPropertyDetail) {

		$property = Property::model()->findByAttributes(array(
			'recordId'=>$xmlProperty->RecordId,
			'groupId'=>$xmlProperty->GroupId,
			'branchId'=>$xmlProperty->BranchId,
		));

		if (empty($property)) {
			$property = new Property;

			$property->spec = new PropertySpec;
			$property->finance = new PropertyFinance;
			$property->media = new PropertyMedia;

			$property->recordId = $xmlProperty->RecordId;
			$property->groupId = $xmlProperty->GroupId;
			$property->branchId = $xmlProperty->BranchId;
		}

		//Flat Number?
		if (!empty($xmlProperty->c_AddName)) {
			$property->houseNum = $xmlProperty->c_AddName;
			$property->flatNum = $xmlProperty->cAddNumber;
		} else {
			$property->houseNum = $xmlProperty->c_AddNumber;
		}
		$property->street = $xmlProperty->c_AddStreet;
		$property->area = $xmlProperty->c_AddSuburb;
		$property->town = $xmlProperty->c_AddTown;
		$property->region = $xmlProperty->c_AddCounty;
		$property->postcode = $xmlProperty->c_AddPC1.' '.$xmlProperty->c_AddPC2;

		switch ($xmlProperty->c_Status) {
			case 'For Sale':
				$property->status = 'published';
				break;

			case 'Under Offer':
				$property->status = 'underOffer';
				break;

			case 'Withdrawn':
				$property->status = 'withdrawn';
				break;

		}

		/*
		 * Finance
		 */
		$property->finance->price = intval($xmlProperty->p_Price);
		if (strpos($xmlProperty->p_PriceText,'FIXED PRICE') !== false) {
			$property->finance->priceType = 'Fixed Price';
		} elseif(strpos($xmlProperty->p_PriceText,'OFFERS OVER') !== false) {
			$property->finance->priceType = 'Offers Over';
		} elseif(strpos($xmlProperty->p_PriceText,'OFFERS AROUND') !== false || strpos($xmlProperty->p_PriceText,'OFFERS IN THE REGION OF') !== false) {
			$property->finance->priceType = 'Offers Around';
		}

		/*
		 * Spec
		 */
		$property->spec->bedrooms = intval($xmlProperty->p_Bedrooms);
		$property->spec->bathrooms = intval($xmlProperty->p_Bathrooms);
		$property->spec->publicRooms = intval($xmlProperty->p_Receptions);

		if (!empty($xmlProperty->p_GardenDesc)) {
			$property->spec->garden = $xmlProperty->p_GardenDesc;
		} elseif($xmlProperty->p_GardenExists == 'true') {
			$property->spec->garden = 'Yes';
		}

		if (!empty($xmlProperty->p_GardenDesc)) {
			$property->spec->garden = $xmlProperty->p_GardenDesc;
		} elseif($xmlProperty->p_GardenExists == 'true') {
			$property->spec->garden = 'Yes';
		}

		if (!empty($xmlProperty->p_GarageDesc)) {
			$property->spec->garage = $xmlProperty->p_GarageDesc;
		} elseif($xmlProperty->p_GarageExists == 'true') {
			$property->spec->garage = 'Yes';
		}

		if (!empty($xmlProperty->p_ParkingDesc)) {
			$property->spec->parking = $xmlProperty->p_ParkingDesc;
		} elseif($xmlProperty->p_ParkingExists == 'true') {
			$property->spec->parking = 'Yes';
		}

		$property->spec->newBuild = ($xmlProperty->p_NewBuild == 'true' ? 1 : 0);
		$property->spec->windows = ($xmlProperty->p_DoubleGlazed == 'true' ? 'Double Glazing' : false);
		$property->spec->heating = $xmlProperty->p_HeatingType;

		$property->spec->type = $xmlProperty->p_PropertyType;
		$property->spec->summary = $xmlProperty->p_BriefDescription;
		$property->spec->description = $xmlProperty->p_MainDescription;
		$property->spec->viewingText = $xmlProperty->p_ViewingArrangement;

		/*
		 * Media
		 */
		$property->media->brochure = ($xmlPropertyMedia->PDFBrochure1 == 'true' ? 1 : 0);
		$property->media->epc = ($xmlPropertyMedia->PDFHip1 == 'true' ? 1 : 0);
		$property->media->floorPlan1 = ($xmlPropertyMedia->FloorPlan1 == 'true' ? 1 : 0);
		$property->media->floorPlan2 = ($xmlPropertyMedia->FloorPlan2 == 'true' ? 1 : 0);
		$property->media->floorPlan3 = ($xmlPropertyMedia->FloorPlan3 == 'true' ? 1 : 0);
		$property->media->map1 = ($xmlPropertyMedia->Map1 == 'true' ? 1 : 0);
		$property->media->map2 = ($xmlPropertyMedia->Map2 == 'true' ? 1 : 0);
		$property->media->energy1 = ($xmlPropertyMedia->Energy1 == 'true' ? 1 : 0);
		$property->media->energy2 = ($xmlPropertyMedia->Energy2 == 'true' ? 1 : 0);

		/*
		 * Images
		 */

		$images = array();

		//First image
		$image = PropertyImage::model()->findByAttributes(array(
			'name'=>$property->groupId.'_'.$property->branchId.'_'.$property->recordId.'_'.$xmlProperty->p_Image1Id.'_WEB.JPG',
		));
		if (empty($image)) {
			$image = new PropertyImage;
			$image->name = $property->groupId.'_'.$property->branchId.'_'.$property->recordId.'_'.$xmlProperty->p_Image1Id.'_WEB.JPG';
			$image->orderId = 0;
		}

		$images[] = $image;

		//Rest of images
		foreach ($xmlPropertyDetail as $xmlPropertyImage) {
			if (!empty($xmlPropertyImage->ImageId)) {
				$image = PropertyImage::model()->findByAttributes(array(
					'name'=>$property->groupId.'_'.$property->branchId.'_'.$property->recordId.'_'.$xmlPropertyImage->ImageId.'_WEB.JPG',
				));

				if (empty($image)) {
					$image = new PropertyImage;
				}

				if (strlen($xmlPropertyImage->Description) <= 255) {
					$image->description = $xmlPropertyImage->Description;
				}
				$image->title = $xmlPropertyImage->Title;
				$image->measurement = $xmlPropertyImage->Measurement;
				$image->name = $property->groupId.'_'.$property->branchId.'_'.$property->recordId.'_'.$xmlPropertyImage->ImageId.'_WEB.JPG';
				$image->orderId = intval((string)$xmlPropertyImage->anOrder);
				$images[] = $image;
			}
		}

		if ($property->save()) {
			$property->spec->propId = $property->id;
			if (!$property->spec->save()) {
				var_dump($property->spec->errors);
			}

			$property->finance->propId = $property->id;
			if (!$property->finance->save()) {
				var_dump($property->finance->errors);
			}

			$property->media->propId = $property->id;
			if (!$property->media->save()) {
				var_dump($property->media->errors);
			}

			foreach ($images as $i=>$image) {
				$image->propId = $property->id;
				if (!$image->save()) {
					var_dump($image->errors);
				} else {
					$images[$i] = $image;
				}
			}
			$property->images = $images;

		}

		if (!$property->save()) {
			var_dump($property->errors);
		}

		return $property;
	}

}